/**
 * File:	include/network/runtime.ycp
 * Package:	Network configuration
 * Summary:	Runtime routines
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

import "Arch";
import "Desktop";
import "ISDN";
import "Mode";
import "NetworkDevices";
import "Package";
import "Service";
import "PackageSystem";

textdomain "network";

/**
 * Run SuSEconfig
 * @return true if success
 */
define boolean RunSuSEconfig() {
    y2milestone("Running SuSEconfig ...");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module apache 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module sendmail 2>/dev/null");
    SCR::Execute(.target.bash, "/sbin/SuSEconfig --module postfix 2>/dev/null");
    return true;
}

/**
 * Run one SuSEconfig module
 * @param modul SuSEconfig module
 * @return true if success
 */
define boolean RunSuSEconfigModule(string modul) {
    if(modul == nil || modul == "") {
	y2error("Wrong SuSEconfig module: %1", modul);
	return false;
    }
    y2milestone("Running SuSEconfig module %1", modul);
    return (SCR::Execute(.target.bash, sformat("/sbin/SuSEconfig --module %1", modul)) == 0);
}


/**
 * Link detection
 * @return true if link found
 * @see ethtool(8)
 */
boolean HasLink() {
    string ifname = "eth0";

    string command = sformat("ethtool %1 | grep -q 'Link detected: no'", ifname);
    if((integer) SCR::Execute(.target.bash, command) == 1) return false;
    return true;
}

/**
 * Are there interfaces controlled by smpppd and kinternet?
 * They are the ones with USERCONTROL=yes (#44303)
 * @return true/false
 */
boolean HaveDialupLikeInterfaces () {
    list <string> devs = NetworkDevices::Locate ("USERCONTROL", "yes");
    y2milestone ("user controlled interfaces: %1", devs);
    if (devs != [])
    {
	return true;
    }

    devs = ISDN::Locate ("USERCONTROL", "yes");
    y2milestone ("user controlled ISDN interfaces: %1", devs);

    return devs != [];
}

/**
 * Setup smpppd(8)
 * @return true if success
 */
define boolean SetupSMPPPD(boolean install_force) {
    boolean ret = true;
    /* Stop and disable */
    if (!HaveDialupLikeInterfaces ()) {
	ret = Service::Disable("smpppd") && ret;
	ret = Service::Stop("smpppd") && ret;
    }
    /* Start and enable */
    else {
       if (!PackageSystem::Installed("smpppd") || !PackageSystem::Installed("kinternet"))
	 {
    string message =
    // notification about package needed 1/2
    _("<p>Because Device Control for Non-root User has been enabled, the <b>%1</b> packages must be installed.</p>") +
    // notification about package needed 2/2
    _("<p>Do you want to install it now?</p>");

	// (#299033) - if not forced, user can continue also without packages
        if (!install_force) PackageSystem::CheckAndInstallPackages(["smpppd", "kinternet"]);
		else
	Package::InstallAllMsg(["smpppd", "kinternet"], message);


	ret = Service::Enable("smpppd") && ret;

	/* Installation? */
	if(Mode::normal ()) {
	    if(Service::Status("smpppd") == 0)
		ret = Service::Reload("smpppd") && ret;
	    else
		ret = Service::Start("smpppd") && ret;
	}
      }
    }

    return ret;
}
/**
 * Do we need to start KInternet?
 */
define boolean needKInternet(){
     /* Any dialup devices? */
     if (!HaveDialupLikeInterfaces ())
     {
        y2milestone ("No dialup-like interfaces");
        return false;
     }

     /* Installation? */
     if(!Mode::normal ()) {
        y2milestone("No normal mode");
        return false;
     }
  return true;
}


/**
 * Run KInternet
 * @return true if success
 */
define boolean RunKInternet() {
 if (!needKInternet()) return true;
    /* Text mode? */
    map ui = UI::GetDisplayInfo();
    boolean ncurses = (boolean) ui["TextMode"]:nil;
    y2milestone("Text mode: %1", ncurses);
    if(ncurses == nil || ncurses == true) return true;

    string kdepath = "/opt/kde3/bin/";

    // Is it installed?
    string kinternet = kdepath + "kinternet";
    if ((integer) SCR::Read (.target.size, kinternet) < 0)
    {
	y2milestone ("%1 does not exist", kinternet);
	return true;
    }

    // run it by creating a file in /var/lib/Desktop
    Desktop::RunViaDesktop ("kinternet", ["--quiet"]);
}





/* EOF */
}
