/**
 * File:	clients/routing.ycp
 * Package:	Network configuration
 * Summary:	Routing client
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Main file for routing configuration.
 * Uses all other files.
 */

{

textdomain "network";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("Routing module started");

import "Label";
import "Routing";
import "Wizard";

import "CommandLine";
import "String";
import "RichText";
import "NetworkService";

/**
 * Return a modification status
 * @return true if data was modified
 */
define boolean Modified() {
    return Routing::Modified();
}

include "network/services/routing.ycp";

/**
 * Main Routing GUI
 */
any RoutingGUI() {
    Routing::Read();

    Wizard::CreateDialog();
    Wizard::SetDesktopIcon("routing");
    Wizard::SetNextButton(`next, Label::FinishButton() );

    /* main ui function */
    any ret = RoutingMainDialog();
    y2debug("ret == %1", ret);

    if(ret == `next && Routing::Modified()) {
	Routing::Write();
	NetworkService::StartStop ();
    }

    UI::CloseDialog();
    return ret;
}

string PrintableRoutingTable( list <map> items )
{
    list <list <string> > table_items = [];
    foreach (map route, items, {
	table_items = add( table_items, 
		[
		  route["destination"]:"",
		  route["gateway"]:"",
		  route["netmask"]:"-",
		  route["device"]:"-",
		  route["extrapara"]:""
		]
	);

    });

    string headline = String::UnderlinedHeader( _("Routing Table"), 0 );
    string table = String::TextTable(
	[
	    _("Destination"),
	    _("Gateway"),
	    _("Netmask"),
	    _("Device"),
	    _("Options")
	],
	table_items,
	$[] );

    return headline + "\n" + table;

}
/**
 * Handler for action "list"
 * @param options action options
 */
define boolean ListHandler( map <string, string> options ) {

    CommandLine::Print( PrintableRoutingTable( Routing::Routes ) );
    CommandLine::Print("");

    return true;
}

define boolean ShowHandler( map <string, string> options ) {
    //FIXME: handle empty list

    CommandLine::Print( PrintableRoutingTable (
	filter( map route, Routing::Routes, {
	    return (route["destination"]:"" == options["dest"]:"");
	})
    ) );
    CommandLine::Print("");

    return true;
}

define boolean IPFWHandler( map <string, string> options ) {
    CommandLine::Print( String::UnderlinedHeader(_("IP Forwarding:"), 0) );

    if (options["show"]:nil != nil)
    {
	CommandLine::Print("");
	if ( Routing::Forward )
	   CommandLine::Print(_("IP forwarding is enabled"));
	else
	   CommandLine::Print(_("IP forwarding is disabled"));
	CommandLine::Print("");
    }
    return true;
}
/**
 * Command line definition
 */
map cmdline = $[
    /* Commandline help title */
    "help"	: _("Routing Configuration"),
    "id"	: "routing",
    "guihandler": RoutingGUI,
    "initialize": Routing::Read,
    "finish"	: Routing::Write, // FIXME
    "actions"	: $[
	"list" : $[
	    "help"	: _("Show complete routing table"),
	    "handler"	: ListHandler, 
	],
	"show" : $[
	    "help"	: _("Show routing table entry for selected destination"),
	    "handler"	: ShowHandler,
	],
	"ip-forwarding" : $[
	    "help"	: _("IP forwarding settings"),
	    "handler"   : IPFWHandler,
	]
    ],
    "options" : $[
	"dest" : $[
	    "type" : "string",
	    "help" : _("Destination addresss IP"),
	],
	"show" : $[
	    "help" : _("Show current settings")
	],
	"on" : $[
	    "help" : _("Enable IP forwarding")
	],
	"off" : $[
	    "help" : _("Disable IP forwarding")
	],
    ],
    "mappings" : $[
	"show" : [ "dest" ],
	"ip-forwarding" : [ "show", "on", "off" ]
	]
];

any ret = CommandLine::Run(cmdline);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("Routing module finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}
