/**
 * File:	lan/cmdline.ycp
 * Package:	Network configuration
 * Summary:	Network cards cmdline handlers
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

textdomain "network";

import "CommandLine";
import "Label";
import "Lan";
import "NetworkInterfaces";
import "RichText";
import "Report";
import "LanItems";
import "Map";

list <map<string, any> > getConfigList(){
 list <map<string, any> > confList = [];
 //integer count = 0;
 LanItems::BuildLanOverview();
 //list<map<string,any> > overview = (list<map<string,any> >)LanItems::Overview();
 foreach(integer position,any row, LanItems::Items, {
  LanItems::current = position;
  confList = add(confList, $[tostring(size(confList	)) : $["id" : position,
				"rich_descr" : LanItems::getCurrentItem()["table_descr", "rich_descr"]:"",
				"descr" : LanItems::getCurrentItem()["table_descr", "table_descr", 0]:"",
				"addr" : LanItems::getCurrentItem()["table_descr", "table_descr", 1]:""]]);
//  count = count + 1;
 });
 return confList;
}

boolean validateId(map<string, string> options, list <map<string, any> > config){
 if (options["id"]:nil == nil){
			 Report::Error( _("Use \"id\" option to determine device."));
			 return false;
			}

   if (tointeger(options["id"]:"0")>size(config)-1){
			 Report::Error( _("Value of \"id\" is out of range. Use \"list\" option to check max. value of \"id\"."));
			 return false;
			}
 return true;
}

integer getItem(map<string, string> options, list <map<string, any> > config){
 integer ret = -1; 
 foreach(map<string, any> row, config, {
   if(options["id"]:"0" == Map::Keys(row)[0]:"") ret = tointeger(Map::Keys(row)[0]:"-1");
 });
 if(ret==-1)y2error("Device not matched!");
 return ret;
}


define boolean AddIface (integer hw_id) {
    Lan::Add ();
    LanItems::SelectHW (hw_id);
    LanItems::SetDefaultsForHW ();

    // warn if selecting a card without a driver, #29296
    // TODO also for DSL...
/*
    if (NetworkModules::Alias == "")
    {
	CommandLine::Print(_("The device does not have a driver module.
The driver may be built in the kernel."));
	if (!CommandLine::YesNo ())
	{
	    return false;
	}
    }
*/
    // this is one of 3 places to install packages :-(
    // - kernel modules (InstallKernel): before loaded
    // - smpppd & kinternet: before net start
    // - wlan firmware: here, just because it is copied from modems
    //   #45960
/*
    if(Lan::Requires != [] && Lan::Requires != nil) {
	if(PackagesInstall(Lan::Requires) != `next)
	    return false;
    }
*/
    return true;
}

/**
 * Handler for action "show"
 * @param options action options
 */
define boolean ShowHandler(map<string, string> options) {
   list <map<string, any> > config = getConfigList();
   if (validateId(options, config)==false) return false;
    foreach(map<string, any> row, config, {
     foreach(string key, map<string, any> value, (map<string, map<string, any> >) row, {
	if (key == options["id"]:"0"){
			// create plain text from formated HTML
		 string text = sformat("echo \"%1\"|sed s/'<br>'/'\\n'/g|sed s/'<\\/li>'/'\\n'/g|sed s/'<[/a-z]*>'/''/g", value["rich_descr"]:"");
			 map<string, any> descr = (map<string, any>)SCR::Execute(.target.bash_output, text);
			 y2internal("%1", descr);
			 CommandLine::Print( descr["stdout"]:"" );
			}
     });
    });
    return true;
}

define boolean ListHandler(map<string, string> options) {
    foreach(map<string, any> row, getConfigList(), {
     foreach(string id, map <string,any> detail, (map<string, map<string, any> >)row, {
      CommandLine::Print(sformat("%1\t%2, %3\n",id, detail["descr"]:"", detail["addr"]:""));
     });
    });
 return true;
}
/**
 * Handler for action "add"
 * @param options action options
 */
define boolean AddHandler(map<string, string> options) {
    LanItems::type = options["type"]:"ethernet";
    if (!contains(["arcnet", "bluetooth", "dummy", "ethernet", "fddi", "myrinet", "token-ring", "usb", "wireless"], LanItems::type)){
	Report::Error(_("Impossible value for type!"));
	 return false;
	}
    LanItems::bootproto = options["bootproto"]:"none";
    if (!contains(["none", "static", "dhcp"], LanItems::bootproto)){
        Report::Error(_("Impossible value for bootproto!"));
         return false;
        }
    LanItems::ipaddr = options["ip"]:"";
    LanItems::netmask = options["netmask"]:"255.255.255.0";
    LanItems::startmode = options["startmode"]:"auto";
    if (!contains(["auto", "ifplugd", "nfsroot"], LanItems::startmode)){
        Report::Error(_("Impossible value for startmode!"));
         return false;
        }


   CommandLine::Print(LanItems::type);
   CommandLine::Print(LanItems::bootproto);
   CommandLine::Print(LanItems::ipaddr);
   CommandLine::Print(LanItems::netmask);
/*
    CommandLine::Print(sformat(_("Adding Device: %1"), dev));

    if(!Lan::Add()) {
	CommandLine::Print(Label::ErrorMsg());
	return false;
    }

    if(options["ipaddr"]:"" != "") Lan::ipaddr = options["ipaddr"]:"";
    if(options["netmask"]:"" != "") Lan::netmask = options["netmask"]:"";
    if(options["bootproto"]:"" != "") Lan::bootproto = options["bootproto"]:"";
    Lan::type = NetworkInterfaces::device_type(dev);
    Lan::device = NetworkInterfaces::device_num(dev);

    Lan::Commit();
    CommandLine::Print(_("Success"));
*/

    return true;
}

/**
 * Handler for action "edit"
 * @param options action options
 */
define boolean EditHandler(map<string, string> options) {
   list <map<string, any> > config = getConfigList();

   if (validateId(options, config)==false) return false;

   LanItems::current = getItem(options, config);
   LanItems::SetItem();

  if (size(LanItems::getCurrentItem()["ifcfg"]:"")==0){
   NetworkInterfaces::Add();
   LanItems::operation = `edit;
   LanItems::interfacename=LanItems::getCurrentItem()["hwinfo", "dev_name"]:"";
   LanItems::Items[LanItems::current, "ifcfg"] = LanItems::interfacename;
  }

/*
	    if (substring (dev, 0, 1) == "-") // unconfigured
	    {
		integer i = tointeger (substring (dev, 1));
		if (! AddIface (i))
		{
		CommandLine::Print(_("Couldn't add interface"));
		return false;
		}
	    } else
	      {
		Lan::Edit(dev);
		if (LanItems::startmode == "managed")
		{
		    // Continue-Cancel popup
		   CommandLine::Print(_("The interface is currently set to be managed
by the NetworkManager applet.

If you edit the settings for this interface here,
the interface will no longer be managed by NetworkManager.
"));

		    if (!CommandLine::YesNo()) return false;
		    //
		    // TODO move the defaults to GetDefaultsForHW
		    LanItems::startmode = "ifplugd";
		}
	      }
*/
if (contains(Map::Keys(options), "ip")) options["bootproto"] = "static";

    LanItems::bootproto = options["bootproto"]:"none";
    if (!contains(["none", "static", "dhcp"], LanItems::bootproto)){
        Report::Error(_("Impossible value for bootproto!"));
         return false;
        }
    if (LanItems::bootproto=="static"){
	    LanItems::ipaddr = options["ip"]:"";
	    LanItems::netmask = options["netmask"]:"255.255.255.0";
	   } else{
		LanItems::ipaddr = "";
		LanItems::netmask = "";
		}

    LanItems::startmode = options["startmode"]:"auto";
    if (!contains(["auto", "ifplugd", "nfsroot"], LanItems::startmode)){
        Report::Error(_("Impossible value for startmode!"));
         return false;
        }

   CommandLine::Print(sformat("%1 :\t%2", _("Device Type"), LanItems::type));
   CommandLine::Print(sformat("%1 :\t%2", _("Bootproto"), LanItems::bootproto));
   CommandLine::Print(sformat("%1 :\t%2",_("IP Address"), LanItems::ipaddr));
   CommandLine::Print(sformat("%1 :\t%2",_("Mask"), LanItems::netmask));
   LanItems::Commit();

    return true;
}
/**
 * Handler for action "delete"
 * @param options action options
 */
define boolean DeleteHandler(map<string, string> options) {
   list <map<string, any> > config = getConfigList();
   if (validateId(options, config)==false) return false;
   foreach(map<string, any> row, config, {
     foreach(string key, map<string, any> value, (map<string, map<string, any> >) row, {
        if (key == options["id"]:"0"){
			LanItems::current = tointeger(value["id"]:-1);
		            Lan::Delete();
		            LanItems::Commit();
			 CommandLine::Print(_("The device was deleted."));
                        }
     });
    });


    return true;
}

/* EOF */
}
