//
{
// testedfiles: NetworkStorage.ycp
include "testsuite.ycp";

import "Assert";

map MockBash(string stdout) {
    return $[
	"target" : $[
	    "bash_output" : $[
		"exit" : 0,
		"stdout" : stdout,
		"stderr" : "",
	    ],
	],
    ];
}

map READ = $[
    "target" : $[
        "tmpdir" : "/tmp",
    ]
];
map WRITE = $[];
map EXECUTE = MockBash("");

TESTSUITE_INIT([READ, WRITE, EXECUTE], nil);

import "NetworkStorage";

EXECUTE = MockBash ("/dev/sda2 / ext3 rw,relatime,errors=continue,user_xattr,acl,commit=15,barrier=1,data=ordered 0 0");
TEST(``(
        Assert::Equal("/dev/sda2", NetworkStorage::getDevice("/"))
        ), [READ, WRITE, EXECUTE], nil);

EXECUTE = MockBash ("nfs.example.com:/home/ /home nfs4 rw,relatime,vers=4,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=krb5i,clientaddr=10.0.2.2,minorversion=0,local_lock=none,addr=10.0.0.1 0 0");
TEST(``(
        Assert::Equal("nfs", NetworkStorage::getDevice("/home"))
        ), [READ, WRITE, EXECUTE], nil);

/*
FIXME polish it to really test it

TEST(``(
        Assert::Equal(`nfs, NetworkStorage::isDiskOnNetwork("server:/export"))
        ), [READ, WRITE, EXECUTE], nil);

TEST(``(
        Assert::Equal(`nfs, NetworkStorage::isDiskOnNetwork("server-v4:/"))
        ), [READ, WRITE, EXECUTE], nil);
*/

}
